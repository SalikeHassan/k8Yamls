Set 1
1. Create a pod named `nginx-pod` with the image `nginx:latest`.
2. Create a deployment named `webapp-deployment` with 3 replicas, using the image `nginx:1.16`.
3. Expose the deployment `webapp-deployment` as a service named `webapp-service` on port 80.
4. Create a ConfigMap named `app-config` with a key `APP_ENV` and value `production`.
5. Create a pod named `configmap-pod` that uses the `app-config` ConfigMap. The environment variable `APP_ENV` should be set from the ConfigMap.

------------------
Set 2
6. Create a secret named `db-secret` with keys `username` (value: `admin`) and `password` (value: `P@ssw0rd`).
7. Create a pod named `secret-pod` that uses the `db-secret` Secret. The environment variables `DB_USER` and `DB_PASS` should be set from the Secret.
8. Create a PersistentVolume named `pv-data` with a capacity of `1Gi`, access mode `ReadWriteOnce`, and hostPath `/mnt/data`.
9. Create a PersistentVolumeClaim named `pvc-data` requesting `1Gi` of storage with access mode `ReadWriteOnce`.
10. Create a pod named `pvc-pod` that mounts the `pvc-data` PersistentVolumeClaim at `/data`.

------------------
Set 3
11. Create a job named `batch-job` that runs the image `busybox` and executes the command `echo "Hello Kubernetes"`.
12. Create a CronJob named `daily-job` that runs the image `busybox` and executes the command `date` every day at midnight.
13. Create an Ingress resource named `webapp-ingress` to expose the `webapp-service` on the path `/webapp`.
14. Create a pod named `resource-limits-pod` using the image `nginx:latest` with CPU limit `500m` and memory limit `256Mi`.
15. Create a namespace named `dev-environment`.

------------------
Set 4
16. Deploy a pod named `dev-nginx` in the `dev-environment` namespace using the image `nginx:latest`.
17. Scale the deployment `webapp-deployment` to 5 replicas.
18. Perform a rolling update on the `webapp-deployment` to update the image to `nginx:1.17`.
19. Create a NetworkPolicy named `deny-all` in the `default` namespace that denies all ingress traffic to pods.
20. Create a service account named `app-sa` and assign it to a pod named `sa-pod` using the image `nginx:latest`.

Set 5
------------------
21. Create a DaemonSet named `log-collector` that runs the image `fluentd` on all nodes.
22. Create a Horizontal Pod Autoscaler (HPA) for the deployment `webapp-deployment` that scales between 2 and 10 replicas based on CPU usage, targeting 50% CPU utilization.
23. Create a pod named `liveness-pod` using the image `nginx:latest` with a liveness probe that checks the path `/healthz` on port 80.
24. Create a pod named `readiness-pod` using the image `nginx:latest` with a readiness probe that checks the path `/ready` on port 80.
25. Update the deployment `webapp-deployment` to use the image `nginx:1.18` using a `kubectl patch` command.

Set 6
------------------
26. Create a deployment named `affinity-deployment` with 2 replicas using the image `nginx:latest` and configure pod affinity to ensure that pods are scheduled on nodes where the label `app=web` is present.
27. Backup the ETCD database and restore it from the backup.
28. Create a Role named `pod-reader` in the `default` namespace that allows reading pods, and bind this role to a user named `dev-user`.
29. Create a Custom Resource Definition (CRD) named `crontabs.stable.example.com` with the version `v1`.
30. Create a deployment named `anti-affinity-deployment` with 2 replicas using the image `nginx:latest` and configure pod anti-affinity to ensure that no two pods are scheduled on the same node.

Set 7
------------------
31. Create a Service of Type LoadBalancer named `loadbalancer-service` to expose the deployment `webapp-deployment` on port 80.
32. Create a Pod Disruption Budget (PDB) named `webapp-pdb` for the deployment `webapp-deployment` ensuring at least 1 pod is always available.
33. Create a ReplicaSet named `webapp-replicaset` with 3 replicas using the image `nginx:1.16`.
34. Create a pod named `custom-scheduler-pod` using the image `nginx:latest` and ensure it uses a custom scheduler named `my-scheduler`.
35. Create a pod named `resource-pod` using the image `nginx:latest` with a CPU request of `100m` and limit of `200m`, and a memory request of `128Mi` and limit of `256Mi`.

Set 8
------------------
36. Create a service named `custom-selector-service` on port 8080 that selects pods with the label `app=custom-app`.
37. Create a RoleBinding named `pod-reader-binding` in the `default` namespace that binds the `pod-reader` role to the service account `default`.
38. Create an ExternalName service named `external-service` that maps to `example.com`.
39. Create a headless service named `headless-service` for the deployment `webapp-deployment`.
40. Create a pod named `serviceaccount-pod` using the image `nginx:latest` and assign it to the service account `app-sa`.

Set 9
------------------
41. Create a pod named `node-selector-pod` using the image `nginx:latest` and ensure it is scheduled on nodes with the label `disktype=ssd`.
42. Create a pod named `init-container-pod` with an init container that uses the image `busybox` and copies a file from `/src` to `/dest`. The main container should use the image `nginx:latest`.
43. Create a pod named `toleration-pod` using the image `nginx:latest` that tolerates nodes with the taint `key=value:NoSchedule`.
44. Create a StatefulSet named `data-statefulset` with 3 replicas using the image `nginx:latest` and ensure each pod has a unique PersistentVolumeClaim using VolumeClaimTemplates.
45. Create a pod named `secret-volume-pod` using the image `nginx:latest` and mount the secret `db-secret` as a volume at `/etc/secret`.

Set 10
------------------
46. Implement Blue-Green Deployment for `webapp-deployment` where the green environment uses the image `nginx:1.17` and the blue environment uses `nginx:1.16`.
47. Create a pod named `hostpath-pod` using the image `busybox` and mount a host path volume from `/mnt/data` on the host to `/data` in the container.
48. Implement a RollingUpdate strategy for `rollingupdate-deployment` with 3 replicas using the image `nginx:latest` and configure the update strategy to have `maxSurge=1` and `maxUnavailable=1`.
49. Create a Custom Resource Definition (CRD) named `widgets.example.com` and a custom resource named `my-widget` using this CRD.
50. Create a pod named `logging-pod` using the image `busybox` that logs `Hello, Kubernetes!` every 5 seconds.
