apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  labels:
    app: nginx
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP

# ClusterIP Service

# A ClusterIP service is the default type of service which exposes the service on a cluster-internal IP.

apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod-1
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: nginx:latest
---
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod-2
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: nginx:latest

# ClusterIP Service
apiVersion: v1
kind: Service
metadata:
  name: myapp-clusterip-service
spec:
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP

#NodePort Service

# A NodePort service exposes the service on each Node’s IP at a static port (the NodePort).

apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod-1
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: nginx:latest
---
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod-2
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: nginx:latest

# NodePort Service
apiVersion: v1
kind: Service
metadata:
  name: myapp-nodeport-service
spec:
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
    nodePort: 30036
  type: NodePort

# LoadBalancer Service
# A LoadBalancer service exposes the service externally using a cloud provider’s load balancer.
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod-1
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: nginx:latest
---
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod-2
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: nginx:latest

# LoadBalancer Service
apiVersion: v1
kind: Service
metadata:
  name: myapp-loadbalancer-service
spec:
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: LoadBalancer

# ExternalName Service

# An ExternalName service maps a service to the contents of the externalName field (e.g., a DNS name).

# ExternalName Service

apiVersion: v1
kind: Service
metadata:
  name: myapp-externalname-service
spec:
  type: ExternalName
  externalName: myapp.external.com

# Headless Service

# A Headless service can be used for discovering pods without a ClusterIP. Useful for StatefulSets and other types of workloads that require direct pod-to-pod communication.
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod-1
  labels:
    app: myapp
spec:
  hostname: myapp-pod-1
  subdomain: myapp-headless
  containers:
  - name: myapp-container
    image: nginx:latest
---
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod-2
  labels:
    app: myapp
spec:
  hostname: myapp-pod-2
  subdomain: myapp-headless
  containers:
  - name: myapp-container
    image: nginx:latest

# Headless Service
apiVersion: v1
kind: Service
metadata:
  name: myapp-headless-service
spec:
  selector:
    app: myapp
  clusterIP: None
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80

# •	ClusterIP Service: Exposes the service on a cluster-internal IP.
# •	NodePort Service: Exposes the service on each Node’s IP at a static port.
# •	LoadBalancer Service: Exposes the service externally using a cloud provider’s load balancer.
# •	ExternalName Service: Maps a service to a DNS name.
# •	Headless Service: Enables direct pod-to-pod communication without a ClusterIP.


# In a Kubernetes Service, the port and targetPort fields have specific roles:

# 	1.	port: This is the port on which the Service itself will be exposed. When you access the Service, you use this port.
# 	2.	targetPort: This is the port on the container that the traffic should be directed to. If targetPort is not specified, it defaults to the value of port.

# Here’s a brief explanation of how they work together:

# 	•	port: The port that the Service listens on.
# 	•	targetPort: The port on the container that the traffic from the Service should be directed to.

# For example, if you have a Service with port set to 80 and targetPort set to 8080, the Service will listen on port 80, but it will forward traffic to port 8080 on the container.

# In your specific case, if the container’s nginx server is listening on port 80 (which is the default for nginx), then having just port set to 80 in the Service should work fine, as targetPort will default to the same value.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: webapp
  template:
    metadata:
      labels:
        app: webapp
    spec:
      containers:
        - name: ng
          image: nginx:1.16
          resources:
            requests:
              memory: "250Mi"
              cpu: "250m"
            limits:
              memory: "250Mi"
              cpu: "250m"
---
apiVersion: v1
kind: Service
metadata:
  name: webapp-service
spec:
  selector:
    app: webapp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80